# Advent of Code 2022

```elixir
ExUnit.start()
```

## About

This is my Advent of Code 2022 solutions

## Utils

A helper function to load the input data

```elixir
defmodule Utils do
  def load_input_data(day) do
    "#{__DIR__}/data/day#{day}.txt"
    |> Path.expand()
    |> File.read!()
    |> String.trim()
    |> String.split("\n")
  end
end
```

## Day 1: Calorie Counting

## Part 1

```elixir
defmodule D1P1 do
  def solution(data) do
    data
    |> Enum.map(fn el ->
      if el == "", do: "", else: String.to_integer(el)
    end)
    |> Enum.chunk_by(&(&1 == ""))
    |> Enum.reject(&(hd(&1) == ""))
    |> Enum.map(&Enum.sum/1)
    |> Enum.max()
  end
end
```

```elixir
defmodule Day1Part1Test do
  use ExUnit.Case
  doctest D1P1

  test "should calculate calories correctly" do
    assert D1P1.solution(Utils.load_input_data(1)) == 68467
  end
end

ExUnit.run()
```

## Part 2

```elixir
defmodule D1P2 do
  def solution(data) do
    data
    |> Enum.map(fn el ->
      if el == "", do: "", else: String.to_integer(el)
    end)
    |> Enum.chunk_by(&(&1 == ""))
    |> Enum.reject(&(hd(&1) == ""))
    |> Enum.map(&Enum.sum/1)
    # Sort descending
    |> Enum.sort(&(&1 >= &2))
    # First 3 elements
    |> Enum.take(3)
    |> Enum.sum()
  end
end
```

```elixir
defmodule Day1Part2Test do
  use ExUnit.Case
  doctest D1P2

  test "should calculate calories correctly" do
    assert D1P2.solution(Utils.load_input_data(1)) == 203_420
  end
end

ExUnit.run()
```

## Day 2: Rock Paper Scissors

## Part 1

```elixir
defmodule D2P1 do
  @win 6
  @draw 3

  def solution(data) do
    data
    |> Enum.map(fn el -> rps(el) end)
    |> Enum.sum()
  end

  defp rps(data) do
    first = String.at(data, 0)
    second = String.at(data, -1)

    result =
      case second do
        # Rock
        "X" ->
          if first == "B", do: false, else: true

        # Paper
        "Y" ->
          if first == "C", do: false, else: true

        # Scissors
        "Z" ->
          if first == "A", do: false, else: true
      end

    # Win or loss
    result = if result, do: @win + score(second), else: score(second)

    if first == convert(second) do
      @draw + score(second)
    else
      result
    end
  end

  defp score(shape) do
    %{
      "X" => 1,
      "Y" => 2,
      "Z" => 3
    }[shape]
  end

  defp convert(shape) do
    %{
      "X" => "A",
      "Y" => "B",
      "Z" => "C"
    }[shape]
  end
end
```

```elixir
defmodule Day2Part1Test do
  use ExUnit.Case
  doctest D2P1

  test "should calculate total score correctly" do
    assert D2P1.solution(Utils.load_input_data(2)) == 14375
  end
end

ExUnit.run()
```

## Part 2

```elixir
defmodule D2P2 do
  @win 6
  @draw 3

  def solution(data) do
    data
    |> Enum.map(fn el -> rps(el) end)
    |> Enum.sum()
  end

  defp rps(input) do
    first = String.at(input, 0)
    second = String.at(input, -1)

    case second do
      "Y" ->
        @draw + score(first)

      "X" ->
        score(choose_shape(:loss, first))

      "Z" ->
        @win + score(choose_shape(:win, first))
    end
  end

  # Choose shape that will lead to win
  defp choose_shape(:win, shape) do
    case shape do
      "A" -> "B"
      "B" -> "C"
      "C" -> "A"
    end
  end

  # Choose shape that will lead to loss
  defp choose_shape(:loss, shape) do
    case shape do
      "A" -> "C"
      "B" -> "A"
      "C" -> "B"
    end
  end

  defp score(shape) do
    %{
      "A" => 1,
      "B" => 2,
      "C" => 3
    }[shape]
  end
end
```

```elixir
defmodule Day2Part2Test do
  use ExUnit.Case
  doctest D2P2

  test "should calculate total score correctly" do
    assert D2P2.solution(Utils.load_input_data(2)) == 10274
  end
end

ExUnit.run()
```

## Day 3: Rucksack Reorganization

## Part 1

```elixir
defmodule D3P1 do
  def solution(data) do
    priority = gen_priority()

    data
    |> Enum.map(fn el ->
      el = split(el)
      el = String.myers_difference(elem(el, 0), elem(el, 1))[:eq]
      el = if String.length(el) > 1, do: String.at(el, 0), else: el
      priority[el]
    end)
    |> Enum.sum()
  end

  defp split(string) do
    len = String.length(string) |> div(2)
    String.split_at(string, len)
  end

  defp gen_priority do
    lowercase =
      for x <- 97..122 do
        %{List.to_string([x]) => x - 96}
      end

    uppercase =
      for x <- 65..90 do
        %{List.to_string([x]) => x - (64 - 26)}
      end

    priority = lowercase ++ uppercase
    Enum.reduce(priority, %{}, fn x, acc -> Map.merge(x, acc) end)
  end
end
```

```elixir
defmodule Day3Part1Test do
  use ExUnit.Case
  doctest D3P1

  test "should calculate sum of the priorities correctly" do
    assert D3P1.solution(Utils.load_input_data(3)) == 7889
  end
end

ExUnit.run()
```
